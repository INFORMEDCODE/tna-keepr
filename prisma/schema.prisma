// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  // NOTE: When using postgresql, mysql or sqlserver, uncomment the @db.Text annotations in model Account below
  // Further reading:
  // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
  // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
  url      = env("DATABASE_URL")
}

model Example {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// Necessary for Next auth
model Account {
  id                       String  @id @default(cuid())
  userId                   String
  type                     String
  provider                 String
  providerAccountId        String
  refresh_token            String? // @db.Text
  refresh_token_expires_in Int?
  access_token             String? // @db.Text
  expires_at               Int?
  token_type               String?
  scope                    String?
  id_token                 String? // @db.Text
  session_state            String?
  user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String         @id @default(cuid())
  name          String?
  email         String?        @unique
  emailVerified DateTime?
  image         String?
  masterKey     String? // @db.Text
  accounts      Account[]
  sessions      Session[]
  secrets       Secret[]
  organisations Organisation[]
  boxes         Box[]
  items         Item[]
  locations     Location[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// Secret Data
// Dunno how this should work, having a table filled with "secrets" seems like a bad idea
model Secret {
  id          String   @default(cuid())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  name        String
  value       String
  favourite   Boolean? @default(false)
  description String? // @db.Text

  owner   User   @relation(fields: [ownerId], references: [id])
  ownerId String

  @@id([ownerId, name])
}

model Organisation {
  id        String   @id @unique @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  name        String
  description String? // @db.Text
  location    Location? @relation(fields: [locationId], references: [id])
  locationId  String?
  boxes       Box[]
  owner       User      @relation(fields: [ownerId], references: [id])
  ownerId     String

  @@index([name, ownerId])
}

model Box {
  id        String   @id @unique @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  name           String
  description    String? // @db.Text
  location       Location?     @relation(fields: [locationId], references: [id])
  locationId     String?
  items          Item[]
  organisation   Organisation? @relation(fields: [organisationId], references: [id])
  organisationId String?
  owner          User          @relation(fields: [ownerId], references: [id])
  ownerId        String

  @@index([name, ownerId])
}

model Item {
  id        String   @id @unique @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  name        String
  description String? // @db.Text
  location    Location? @relation(fields: [locationId], references: [id])
  locationId  String?
  box         Box?      @relation(fields: [boxId], references: [id])
  boxId       String?
  owner       User      @relation(fields: [ownerId], references: [id])
  ownerId     String

  @@index([name, ownerId])
}

model Location {
  id        String   @id @unique @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  name          String
  description   String? // @db.Text
  organisations Organisation[]
  boxes         Box[]
  items         Item[]
  owner         User           @relation(fields: [ownerId], references: [id])
  ownerId       String

  @@index([name, ownerId])
}
